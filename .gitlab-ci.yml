# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - docker

build-job:       # This job runs in the build stage, which runs first.
  image: eclipse-temurin:11
  stage: build
  script:
    - ./gradlew assemble
  artifacts:
    when: on_success
    expire_in: 1 days
    paths:
      - build/libs/*
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

unit-test-job:   # This job runs in the test stage.
  image: eclipse-temurin:11
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - ./gradlew test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

build-docker-image:
  stage: docker
  needs:
   - build-job 
  image: 
    name: gcr.io/kaniko-project/executor:v1.15.0-debug
    entrypoint: [""]
  before_script:
    - echo "${CI_PROJECT_DIR}"
    - echo "${CI_REGISTRY_IMAGE}:$CI_PIPELINE_IID" 
  script:
    # https://github.com/GoogleContainerTools/kaniko
    - /kaniko/executor --context "${CI_PROJECT_DIR}" 
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile" 
      --destination "${CI_REGISTRY_IMAGE}:$CI_PIPELINE_IID" 
      --destination "${CI_REGISTRY_IMAGE}:latest" 
      --cleanup
